name: Build installers
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.stepversion.outputs.version }}
      cleanversion: ${{ steps.stepcleanversion.outputs.version }}

    steps:
    - uses: actions/checkout@v2
      
    - name: Set up JDK for compilation
      uses: actions/setup-java@v1
      with:
        java-version: 15.0.1
  
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Build with Maven
      shell: bash
      run: |
        mvn clean install
        mvn clean install -Dportable=true -P compressXZ -f weasis-distributions
      
    - name: Retrieve version
      shell: bash
      run: |
        FVERSION=$(awk -F'[<>]' '/<revision>/{print $3}' weasis-parent/pom.xml)$(awk -F'[<>]' '/<changelist>/{print $3}' weasis-parent/pom.xml)       
        echo "WEASIS_VERSION=${FVERSION}" >> $GITHUB_ENV

    - name: Set compatible version
      shell: bash
      run: |
        CVERSION=$(echo $WEASIS_VERSION | sed -e 's/"//g' -e 's/-.*//')
        echo "WEASIS_CLEAN_VERSION=${CVERSION}" >> $GITHUB_ENV
      
    - id: stepversion
      run: echo ::set-output name=version::${{ env.WEASIS_VERSION }}
    - id: stepcleanversion
      run: echo ::set-output name=version::${{ env.WEASIS_CLEAN_VERSION }}      

    - name: Upload weasis portable distribution
      uses: actions/upload-artifact@v2
      with:
        name: weasis-portable-${{ env.WEASIS_VERSION }}
        path: weasis-distributions/target/portable-dist/weasis-portable.zip

  jpackage:
    env:
      JDK_MODULES: "java.base,java.compiler,java.datatransfer,java.desktop,java.logging,java.management,java.prefs,java.xml,jdk.localedata,jdk.charsets,jdk.crypto.ec,jdk.crypto.cryptoki,jdk.unsupported,jdk.jdwp.agent"
      NAME: "Weasis"
      IDENTIFIER: "org.weasis.viewer"
      JVM_ARGS: "-Dgosh.port=17179"
      WEASIS_INPUT: "weasis-distributions/target/portable-dist/weasis-portable"
      WEASIS_OUTPUT: "weasis-distributions/target/native-dist"
      WEASIS_INPUT_BIN: "weasis-distributions/target/portable-dist/weasis-portable/weasis"
      SUBSTANCE_PKG: "3.5.0"  # Package for Java 11 (remove in weasis 4)
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        include:
      #  - { os: ubuntu-latest, name: GNU, cc: gcc, cxx: g++, platform: x86, wsystem: linux, warc: x86 }
        - { os: ubuntu-latest, name: GNU, cc: gcc, cxx: g++, platform: x64, wsystem: linux, warc: x86-64 }
      #  - { os: macos-latest, name: Clang, cc: clang, cxx: clang++, platform: x64, wsystem: macosx, warc: x86-64 }
      #  - { os: windows-latest, name: VS2019, cc: cl, cxx: cl, platform: x86, wsystem: windows, warc: x86 }
        - { os: windows-latest, name: VS2019, cc: cl, cxx: cl, platform: x64, wsystem: windows, warc: x86-64 }
    
    steps:
    - name: Set output version from build
      shell: bash
      run: |
        echo ${{needs.build.outputs.version}}
        echo ${{needs.build.outputs.cleanversion}}
        echo "WEASIS_VERSION=${{needs.build.outputs.version}}" >> $GITHUB_ENV
        echo "WEASIS_CLEAN_VERSION=${{needs.build.outputs.cleanversion}}" >> $GITHUB_ENV
          
    - name: Git clone of weasis-distributions/script
      shell: bash
      run: |
        REPO="https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git"
        git config --global user.email github-actions@github.com
        git config --global user.name github-actions
        git clone --filter=blob:none --no-checkout --depth 1  --sparse $REPO .
        git sparse-checkout init --cone
        git sparse-checkout set "weasis-distributions/script"
        git checkout

    - name: Set up JDK for jpackage
      uses: actions/setup-java@v1
      with:
        java-version: 16.0.0-ea.24
        architecture: ${{ matrix.platform }}

    - name: Download weasis-portable
      uses: actions/download-artifact@v2
      with:
        name: weasis-portable-${{ env.WEASIS_VERSION }}
        path: weasis-distributions/target/portable-dist
 
    - name: Adapt windows 32-bit msi
      if: matrix.wsystem == 'windows' && matrix.warc == 'x86'
      shell: bash
      run: |
        mv 'C:\Program Files (x86)\WiX Toolset v3.11\bin\candle.exe' 'C:\Program Files (x86)\WiX Toolset v3.11\bin\candle2.exe'
        cp "weasis-distributions/script/resources/windows/msi/candle.exe" 'C:\Program Files (x86)\WiX Toolset v3.11\bin\'
        
    - name: Adapt linux-i386 architecture
      if: matrix.wsystem == 'linux' && matrix.warc == 'x86'
      shell: bash
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update -y -qq
        cat  << 'EOF' > dpkg.bash
        #!/bin/bash
        if [ "$1" = "--print-architecture" ] ; then
          command echo "i386"
        else
          command dpkg2 "$@"
        fi
        EOF
        
        DPKGDIR=$(dirname -- "$(which dpkg)")
        dpkg --print-architecture
        sudo mv ${DPKGDIR}/dpkg ${DPKGDIR}/dpkg2
        sudo cp dpkg.bash ${DPKGDIR}/dpkg
        sudo chmod --reference=${DPKGDIR}/dpkg2 ${DPKGDIR}/dpkg
        dpkg --print-architecture
        
    - name: Unzip portable version
      shell: bash
      run: |
        unzip -o "weasis-distributions/target/portable-dist/weasis-portable.zip" -d "${{ env.WEASIS_INPUT }}"

    - name: Remove binaries not releated to the current architecture
      shell: bash
      run: |
        # Remove pack jar for launcher
        rm -f ${{ env.WEASIS_INPUT_BIN }}/*.jar.pack.gz
        # Remove the unrelated native packages
        find ${{ env.WEASIS_INPUT_BIN }}/bundle/weasis-opencv-core-* -type f ! -name *weasis-opencv-core-${{ matrix.wsystem }}-${{ matrix.warc }}-* -exec rm -f {} \;
        # Special case with 32-bit architecture, remove 64-bit lib
        if [ "${{ matrix.warc }}" = "x86" ] ; then
          rm -f ${{ env.WEASIS_INPUT_BIN }}/bundle/weasis-opencv-core-${{ matrix.wsystem }}-x86-64-*
        fi
        echo "$(ls ${{ env.WEASIS_INPUT_BIN }}/bundle/)"

    - name: Replace substance by a more recent version for Java 11
      shell: bash
      run: |
        curl -L -o "${{ env.WEASIS_INPUT }}/substance.jar" "https://raw.github.com/nroduit/mvn-repo/master/org/pushing-pixels/radiance-substance-all/${{ env.SUBSTANCE_PKG }}/radiance-substance-all-${{ env.SUBSTANCE_PKG }}.jar"
        echo "$(ls -la ${{ env.WEASIS_INPUT }})"
        
    - name: Build app binary with jpackage
      shell: bash
      env:
        RES: "weasis-distributions/script/resources/${{ matrix.wsystem }}"
      run: |
        if [ "${{ matrix.wsystem }}" == "windows" ] ; then
          echo "Cannot apply splash screen because of a bug on Windows"
          # JVM_ARGS="-splash:\$APPDIR\resources\images\about-round.png ${{ env.JVM_ARGS }}"
        else
          JVM_ARGS="-splash:\$APPDIR/resources/images/about-round.png ${{ env.JVM_ARGS }}"
        fi
        jpackage --type app-image --input "${{ env.WEASIS_INPUT_BIN }}" --dest "${{ env.WEASIS_OUTPUT }}" --name "${{ env.NAME }}" \
        --main-jar weasis-launcher.jar --main-class org.weasis.launcher.AppLauncher --add-modules "${{ env.JDK_MODULES }}" \
        --resource-dir "${{ env.RES }}" --java-options "${JVM_ARGS}" --app-version "${{ env.WEASIS_CLEAN_VERSION }}" --verbose
         
        # Build exe for debugging in the console and copy them into the debug folder
        if [ "${{ matrix.wsystem }}" == "windows" ] ; then
          jpackage --type app-image --input "${{ env.WEASIS_INPUT_BIN }}" --dest "${{ env.WEASIS_OUTPUT }}-debug" --name "${{ env.NAME }}" \
          --main-jar weasis-launcher.jar --main-class org.weasis.launcher.AppLauncher --add-modules "${{ env.JDK_MODULES }}" \
          --resource-dir "${{ env.RES }}" --java-options "${JVM_ARGS}" --app-version "${{ env.WEASIS_CLEAN_VERSION }}" --win-console --verbose
          mkdir -p "${{ env.WEASIS_OUTPUT }}/${{ env.NAME }}/debug"
          cp "${{ env.WEASIS_OUTPUT }}-debug/${{ env.NAME }}/${{ env.NAME }}.exe" "${{ env.WEASIS_OUTPUT }}/${{ env.NAME }}/debug/${{ env.NAME }}.exe"
        fi
        echo "$(ls -la ${{ env.WEASIS_OUTPUT }}/${{ env.NAME }})"

    - name: Adapt launching options
      shell: bash
      env:
        RES: "weasis-distributions/script/resources/${{ matrix.wsystem }}"
      run: |
        machine=${{ matrix.wsystem }}
        if [ "$machine" = "macosx" ] ; then
          OUT_APP="${{ env.WEASIS_OUTPUT }}/${{ env.NAME }}.app/Contents/app"
        elif [ "$machine" = "windows" ] ; then
          OUT_APP="${{ env.WEASIS_OUTPUT }}/${{ env.NAME }}/app"         
        else
          OUT_APP="${{ env.WEASIS_OUTPUT }}/${{ env.NAME }}/lib/app"
        fi

        match="\[JavaOptions\]"
        insertOptions='\
        #java-options=-Daudit.log=true\
        #java-options=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8789\
        java-options=--illegal-access=warn\
        java-options=--add-exports=java.base\/sun.net.www.protocol.http=ALL-UNNAMED\
        java-options=--add-exports=java.base\/sun.net.www.protocol.file=ALL-UNNAMED\
        java-options=--add-exports=java.base\/sun.net.www.protocol.https=ALL-UNNAMED\
        java-options=--add-exports=java.base\/sun.net.www.protocol.file=ALL-UNNAMED\
        java-options=--add-exports=java.base\/sun.net.www.protocol.ftp=ALL-UNNAMED\
        java-options=--add-exports=java.base\/sun.net.www.protocol.jar=ALL-UNNAMED\
        java-options=--add-exports=jdk.unsupported\/sun.misc=ALL-UNNAMED\
        java-options=--add-opens=java.base\/java.net=ALL-UNNAMED\
        java-options=--add-opens=java.base\/java.lang=ALL-UNNAMED\
        java-options=--add-opens=java.base\/java.security=ALL-UNNAMED\
        java-options=--add-opens=java.base\/java.io=ALL-UNNAMED\
        java-options=--add-opens=java.desktop\/javax.imageio.stream=ALL-UNNAMED\
        java-options=--add-opens=java.desktop\/javax.imageio=ALL-UNNAMED\
        java-options=--add-opens=java.desktop\/com.sun.awt=ALL-UNNAMED'
        sed -i.bck "s/$match/$match$insertOptions/" "$OUT_APP/${{ env.NAME }}.cfg"
        sed -i.bck '/^java-options=--module-path/d' "$OUT_APP/${{ env.NAME }}.cfg"
        sed -i.bck '/mods\r\{0,1\}/d' "$OUT_APP/${{ env.NAME }}.cfg"
        rm -f "$OUT_APP/${{ env.NAME }}.cfg.bck"

        if [ "$machine" = "linux" ] ; then
          cp "${{ env.RES }}/Dicomizer.desktop" "${{ env.WEASIS_OUTPUT }}/${{ env.NAME }}/lib/weasis-Dicomizer.desktop"
        elif [ "$machine" = "windows" ] ; then
          # Fix icon of second launcher
          cp "${{ env.RES }}/Dicomizer.ico" "${{ env.WEASIS_OUTPUT }}/${{ env.NAME }}/Dicomizer.ico"
        elif [ "$machine" = "macosx" ] ; then
          cp -Rf "${{ env.RES }}/weasis-uri-handler.app" "${{ env.WEASIS_OUTPUT }}/${{ env.NAME }}.app/Contents/MacOS/"
          cp -Rf "${{ env.RES }}/Dicomizer.app" "${{ env.WEASIS_OUTPUT }}/${{ env.NAME }}.app/Contents/MacOS/"
        fi
        
        cat "$OUT_APP/${{ env.NAME }}.cfg"

    - name: Build package with jpackage
      shell: bash
      env:
        RES: "weasis-distributions/script/resources/${{ matrix.wsystem }}"
        FILE_ASSOC: "weasis-distributions/script/file-associations.properties"
        VENDOR: "Weasis Team"
        COPYRIGHT: "© 2009-2020 Weasis Team"
      run: |
        mkdir -p final-dist
        machine=${{ matrix.wsystem }}
        ARC_NAME=${{ matrix.warc }}
        if [ "$machine" = "windows" ] ; then
          [ "$ARC_NAME" = "x86" ] && UPGRADE_UID="3aedc24e-48a8-4623-ab39-0c3c01c7383b" || UPGRADE_UID="3aedc24e-48a8-4623-ab39-0c3c01c7383a"
          jpackage --type "msi" --app-image "${{ env.WEASIS_OUTPUT }}/${{ env.NAME }}" --dest "${{ env.WEASIS_OUTPUT }}" --name "${{ env.NAME }}" --resource-dir "${{ env.RES }}/msi/${ARC_NAME}" \
          --license-file "${{ env.WEASIS_INPUT }}/Licence.txt" --description "Weasis DICOM viewer" --win-upgrade-uuid "$UPGRADE_UID" \
          --copyright "${{ env.COPYRIGHT }}" --app-version "${{ env.WEASIS_CLEAN_VERSION }}" \
          --vendor "${{ env.VENDOR }}" --file-associations "${{ env.FILE_ASSOC }}" --verbose
          cp ${{ env.WEASIS_OUTPUT }}/*.msi final-dist/${{ env.NAME }}-${{ env.WEASIS_CLEAN_VERSION }}-${ARC_NAME}.msi
        elif [ "$machine" = "linux" ] ; then
          if [ "${ARC_NAME}" = "x86" ] ; then
            declare -a installerTypes=("deb")
          else
            declare -a installerTypes=("deb" "rpm")
          fi
          for installerType in ${installerTypes[@]}; do
            jpackage --type "${installerType}" --app-image "${{ env.WEASIS_OUTPUT }}/${{ env.NAME }}" --dest "${{ env.WEASIS_OUTPUT }}" --name "${{ env.NAME }}" --resource-dir "${{ env.RES }}/${installerType}" \
            --license-file "${{ env.WEASIS_INPUT }}/Licence.txt" --description "Weasis DICOM viewer" --vendor "${{ env.VENDOR }}" \
            --copyright "${{ env.COPYRIGHT }}" --app-version "${{ env.WEASIS_CLEAN_VERSION }}" --file-associations "${{ env.FILE_ASSOC }}" \
            --linux-app-release "1" --linux-package-name "weasis" --linux-deb-maintainer "Nicolas Roduit" --linux-rpm-license-type "EPL-2.0" \
            --linux-menu-group "Viewer;MedicalSoftware;Graphics;" --linux-app-category "science" --linux-shortcut --verbose
            cp ${{ env.WEASIS_OUTPUT }}/*.${installerType} final-dist
          done
        elif [ "$machine" = "macosx" ] ; then
          jpackage --type "pkg" --app-image "${{ env.WEASIS_OUTPUT }}/${{ env.NAME }}.app" --dest "${{ env.WEASIS_OUTPUT }}" --name "${{ env.NAME }}" --resource-dir "${{ env.RES }}" \
          --license-file "${{ env.WEASIS_INPUT }}/Licence.txt" --copyright "${{ env.COPYRIGHT }}" --app-version "${{ env.WEASIS_CLEAN_VERSION }}" --mac-package-identifier "${{ env.IDENTIFIER }}" \
          --mac-signing-key-user-name "$CERTIFICATE" --verbose "$MAC_SIGN"
          cp ${{ env.WEASIS_OUTPUT }}/*.pkg final-dist
        fi
        echo "APP_ARTIFACT=weassis-${machine}-${ARC_NAME}-${{ env.WEASIS_CLEAN_VERSION }}" >> $GITHUB_ENV

    - name: Upload the final opencv binary
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.APP_ARTIFACT }}
        path: final-dist
